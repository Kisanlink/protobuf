// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: connectRolePermission.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConnectRolePermissionService_CreateConnectRolePermission_FullMethodName = "/pb.ConnectRolePermissionService/CreateConnectRolePermission"
	ConnectRolePermissionService_GetAllRolePermission_FullMethodName        = "/pb.ConnectRolePermissionService/GetAllRolePermission"
	ConnectRolePermissionService_GetRolePermissionById_FullMethodName       = "/pb.ConnectRolePermissionService/GetRolePermissionById"
	ConnectRolePermissionService_UpdateRolePermission_FullMethodName        = "/pb.ConnectRolePermissionService/UpdateRolePermission"
	ConnectRolePermissionService_DeleteRolePermission_FullMethodName        = "/pb.ConnectRolePermissionService/DeleteRolePermission"
	ConnectRolePermissionService_GetRolePermissionByRoleName_FullMethodName = "/pb.ConnectRolePermissionService/GetRolePermissionByRoleName"
)

// ConnectRolePermissionServiceClient is the client API for ConnectRolePermissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectRolePermissionServiceClient interface {
	CreateConnectRolePermission(ctx context.Context, in *CreateConnRolePermissionRequest, opts ...grpc.CallOption) (*CreateConnRolePermissionResponse, error)
	GetAllRolePermission(ctx context.Context, in *GetConnRolePermissionallRequest, opts ...grpc.CallOption) (*GetConnRolePermissionallResponse, error)
	GetRolePermissionById(ctx context.Context, in *GetConnRolePermissionByIdRequest, opts ...grpc.CallOption) (*GetConnRolePermissionByIdResponse, error)
	UpdateRolePermission(ctx context.Context, in *UpdateConnRolePermissionRequest, opts ...grpc.CallOption) (*UpdateConnRolePermissionResponse, error)
	DeleteRolePermission(ctx context.Context, in *DeleteConnRolePermissionRequest, opts ...grpc.CallOption) (*DeleteConnRolePermissionResponse, error)
	GetRolePermissionByRoleName(ctx context.Context, in *GetRolePermissionByRoleNameRequest, opts ...grpc.CallOption) (*GetRolePermissionByRoleNameResponse, error)
}

type connectRolePermissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectRolePermissionServiceClient(cc grpc.ClientConnInterface) ConnectRolePermissionServiceClient {
	return &connectRolePermissionServiceClient{cc}
}

func (c *connectRolePermissionServiceClient) CreateConnectRolePermission(ctx context.Context, in *CreateConnRolePermissionRequest, opts ...grpc.CallOption) (*CreateConnRolePermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConnRolePermissionResponse)
	err := c.cc.Invoke(ctx, ConnectRolePermissionService_CreateConnectRolePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectRolePermissionServiceClient) GetAllRolePermission(ctx context.Context, in *GetConnRolePermissionallRequest, opts ...grpc.CallOption) (*GetConnRolePermissionallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConnRolePermissionallResponse)
	err := c.cc.Invoke(ctx, ConnectRolePermissionService_GetAllRolePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectRolePermissionServiceClient) GetRolePermissionById(ctx context.Context, in *GetConnRolePermissionByIdRequest, opts ...grpc.CallOption) (*GetConnRolePermissionByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConnRolePermissionByIdResponse)
	err := c.cc.Invoke(ctx, ConnectRolePermissionService_GetRolePermissionById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectRolePermissionServiceClient) UpdateRolePermission(ctx context.Context, in *UpdateConnRolePermissionRequest, opts ...grpc.CallOption) (*UpdateConnRolePermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConnRolePermissionResponse)
	err := c.cc.Invoke(ctx, ConnectRolePermissionService_UpdateRolePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectRolePermissionServiceClient) DeleteRolePermission(ctx context.Context, in *DeleteConnRolePermissionRequest, opts ...grpc.CallOption) (*DeleteConnRolePermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteConnRolePermissionResponse)
	err := c.cc.Invoke(ctx, ConnectRolePermissionService_DeleteRolePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectRolePermissionServiceClient) GetRolePermissionByRoleName(ctx context.Context, in *GetRolePermissionByRoleNameRequest, opts ...grpc.CallOption) (*GetRolePermissionByRoleNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRolePermissionByRoleNameResponse)
	err := c.cc.Invoke(ctx, ConnectRolePermissionService_GetRolePermissionByRoleName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectRolePermissionServiceServer is the server API for ConnectRolePermissionService service.
// All implementations must embed UnimplementedConnectRolePermissionServiceServer
// for forward compatibility.
type ConnectRolePermissionServiceServer interface {
	CreateConnectRolePermission(context.Context, *CreateConnRolePermissionRequest) (*CreateConnRolePermissionResponse, error)
	GetAllRolePermission(context.Context, *GetConnRolePermissionallRequest) (*GetConnRolePermissionallResponse, error)
	GetRolePermissionById(context.Context, *GetConnRolePermissionByIdRequest) (*GetConnRolePermissionByIdResponse, error)
	UpdateRolePermission(context.Context, *UpdateConnRolePermissionRequest) (*UpdateConnRolePermissionResponse, error)
	DeleteRolePermission(context.Context, *DeleteConnRolePermissionRequest) (*DeleteConnRolePermissionResponse, error)
	GetRolePermissionByRoleName(context.Context, *GetRolePermissionByRoleNameRequest) (*GetRolePermissionByRoleNameResponse, error)
	mustEmbedUnimplementedConnectRolePermissionServiceServer()
}

// UnimplementedConnectRolePermissionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConnectRolePermissionServiceServer struct{}

func (UnimplementedConnectRolePermissionServiceServer) CreateConnectRolePermission(context.Context, *CreateConnRolePermissionRequest) (*CreateConnRolePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnectRolePermission not implemented")
}
func (UnimplementedConnectRolePermissionServiceServer) GetAllRolePermission(context.Context, *GetConnRolePermissionallRequest) (*GetConnRolePermissionallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRolePermission not implemented")
}
func (UnimplementedConnectRolePermissionServiceServer) GetRolePermissionById(context.Context, *GetConnRolePermissionByIdRequest) (*GetConnRolePermissionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolePermissionById not implemented")
}
func (UnimplementedConnectRolePermissionServiceServer) UpdateRolePermission(context.Context, *UpdateConnRolePermissionRequest) (*UpdateConnRolePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRolePermission not implemented")
}
func (UnimplementedConnectRolePermissionServiceServer) DeleteRolePermission(context.Context, *DeleteConnRolePermissionRequest) (*DeleteConnRolePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRolePermission not implemented")
}
func (UnimplementedConnectRolePermissionServiceServer) GetRolePermissionByRoleName(context.Context, *GetRolePermissionByRoleNameRequest) (*GetRolePermissionByRoleNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolePermissionByRoleName not implemented")
}
func (UnimplementedConnectRolePermissionServiceServer) mustEmbedUnimplementedConnectRolePermissionServiceServer() {
}
func (UnimplementedConnectRolePermissionServiceServer) testEmbeddedByValue() {}

// UnsafeConnectRolePermissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectRolePermissionServiceServer will
// result in compilation errors.
type UnsafeConnectRolePermissionServiceServer interface {
	mustEmbedUnimplementedConnectRolePermissionServiceServer()
}

func RegisterConnectRolePermissionServiceServer(s grpc.ServiceRegistrar, srv ConnectRolePermissionServiceServer) {
	// If the following call pancis, it indicates UnimplementedConnectRolePermissionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConnectRolePermissionService_ServiceDesc, srv)
}

func _ConnectRolePermissionService_CreateConnectRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectRolePermissionServiceServer).CreateConnectRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectRolePermissionService_CreateConnectRolePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectRolePermissionServiceServer).CreateConnectRolePermission(ctx, req.(*CreateConnRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectRolePermissionService_GetAllRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnRolePermissionallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectRolePermissionServiceServer).GetAllRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectRolePermissionService_GetAllRolePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectRolePermissionServiceServer).GetAllRolePermission(ctx, req.(*GetConnRolePermissionallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectRolePermissionService_GetRolePermissionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnRolePermissionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectRolePermissionServiceServer).GetRolePermissionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectRolePermissionService_GetRolePermissionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectRolePermissionServiceServer).GetRolePermissionById(ctx, req.(*GetConnRolePermissionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectRolePermissionService_UpdateRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectRolePermissionServiceServer).UpdateRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectRolePermissionService_UpdateRolePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectRolePermissionServiceServer).UpdateRolePermission(ctx, req.(*UpdateConnRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectRolePermissionService_DeleteRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectRolePermissionServiceServer).DeleteRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectRolePermissionService_DeleteRolePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectRolePermissionServiceServer).DeleteRolePermission(ctx, req.(*DeleteConnRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectRolePermissionService_GetRolePermissionByRoleName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolePermissionByRoleNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectRolePermissionServiceServer).GetRolePermissionByRoleName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectRolePermissionService_GetRolePermissionByRoleName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectRolePermissionServiceServer).GetRolePermissionByRoleName(ctx, req.(*GetRolePermissionByRoleNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectRolePermissionService_ServiceDesc is the grpc.ServiceDesc for ConnectRolePermissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectRolePermissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ConnectRolePermissionService",
	HandlerType: (*ConnectRolePermissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConnectRolePermission",
			Handler:    _ConnectRolePermissionService_CreateConnectRolePermission_Handler,
		},
		{
			MethodName: "GetAllRolePermission",
			Handler:    _ConnectRolePermissionService_GetAllRolePermission_Handler,
		},
		{
			MethodName: "GetRolePermissionById",
			Handler:    _ConnectRolePermissionService_GetRolePermissionById_Handler,
		},
		{
			MethodName: "UpdateRolePermission",
			Handler:    _ConnectRolePermissionService_UpdateRolePermission_Handler,
		},
		{
			MethodName: "DeleteRolePermission",
			Handler:    _ConnectRolePermissionService_DeleteRolePermission_Handler,
		},
		{
			MethodName: "GetRolePermissionByRoleName",
			Handler:    _ConnectRolePermissionService_GetRolePermissionByRoleName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connectRolePermission.proto",
}
